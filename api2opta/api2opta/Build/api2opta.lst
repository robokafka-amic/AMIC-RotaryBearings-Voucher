***********************************************************************
*
*	CODE GENERATION LISTING FOR: api2opta
*	COMPILER VERSION: 5.22.0.39
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
3001E5C0  FB90 F3F1		sdiv r3, r0, r1
3001E5C4  4359     		mul r1, r1, r3
3001E5C6  EBC1 0000		rsb r0, r1, r0
3001E5CA  4770     		bx lr

$$MOD_U:
3001E5CC  FBB0 F3F1		udiv r3, r0, r1
3001E5D0  4359     		mul r1, r1, r3
3001E5D2  EBC1 0000		rsb r0, r1, r0
3001E5D6  4770     		bx lr

**************************************************
	List function block: TOF
**************************************************

FUNCTION_BLOCK TOF

	{ DE:"<HTML>The TOF block produces a delayed de-activation of the output Q with respect of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tofscheme.png>
<ul>
<li>if IN is TRUE then Q is TRUE</li>
<li>Q becomes FALSE after PT milliseconds from IN becomes FALSE</li>
<li>Q remains FALSE until IN remains FALSE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3001E5D8  E92D 4040		stmdb sp!, { r6, lr }
3001E5DC  462E     		mov r6, r5

#0		{SRC:TOF}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3001E5DE  7930     		ldrb r0, [r6, #4]

#5			JMPC	lReset
(-) BOOL
3001E5E0  2800     		cmp r0, #0
3001E5E2  D130     		bne #96 ; 0x3001E646


#6		
#7			(*	Check if falling edge of IN	*)
#8			LD		Q
(-) UNDEF
3001E5E6  7B30     		ldrb r0, [r6, #12]

#9			RETCN
#10		
(-) BOOL
3001E5E8  2800     		cmp r0, #0
3001E5EA  D031     		beq #98 ; 0x3001E650


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3001E5EE  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
3001E5F0  2800     		cmp r0, #0
3001E5F2  BF18 2000		nemov r0, #0
3001E5F6  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3001E5FA  2800     		cmp r0, #0
3001E5FC  D004     		beq #8 ; 0x3001E608


#15			
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
3001E600  F8DF 7054		ldr r7, [pc, #+84] ; 0x2401D428
3001E604  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
3001E606  6030     		str r0, [r6]

#19		
#20		lUpdate:
#21			
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
3001E608  F8DF 704C		ldr r7, [pc, #+76] ; 0x2401D428
3001E60C  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
3001E60E  6837     		ldr r7, [r6]
3001E610  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
3001E612  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
3001E614  68B7     		ldr r7, [r6, #8]
3001E616  42B8     		cmp r0, r7
3001E618  BF38 2000		lomov r0, #0
3001E61C  BF28 2001		hsmov r0, #1

#27			STN		Q
(*) BOOL
3001E620  B082     		sub sp, sp, #8
3001E622  F8CD 0000		str r0, [sp]
3001E626  2800     		cmp r0, #0
3001E628  BF08 2001		eqmov r0, #1
3001E62C  BF18 2000		nemov r0, #0
3001E630  7330     		strb r0, [r6, #12]
3001E632  F8DD 0000		ldr r0, [sp]
3001E636  B002     		add sp, sp, #8

#28			RETCN
#29			
(-) BOOL
3001E638  2800     		cmp r0, #0
3001E63A  D009     		beq #18 ; 0x3001E650


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3001E63E  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
3001E640  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
3001E642  E005     		b #10 ; 0x3001E650


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
3001E646  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
3001E648  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3001E64A  6030     		str r0, [r6]

#41			LD		TRUE
(-) UNDEF
3001E64C  2001     		mov r0, #1 ; 1

#42			ST		Q
(-) BOOL
3001E64E  7330     		strb r0, [r6, #12]

3001E650  E8BD 4040		ldmia sp!, { r6, lr }

3001E654  4770     		bx lr

3001E658  FFFFFFFF		; 0x2401D428


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3001E65C  E92D 4040		stmdb sp!, { r6, lr }
3001E660  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3001E662  7930     		ldrb r0, [r6, #4]

#5			JMPCN	lReset
(-) BOOL
3001E664  2800     		cmp r0, #0
3001E666  D025     		beq #74 ; 0x3001E6B4


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(-) UNDEF
3001E66A  7B30     		ldrb r0, [r6, #12]

#9			RETC
#10			
(-) BOOL
3001E66C  2800     		cmp r0, #0
3001E66E  D126     		bne #76 ; 0x3001E6BE


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3001E672  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
3001E674  2800     		cmp r0, #0
3001E676  BF18 2000		nemov r0, #0
3001E67A  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3001E67E  2800     		cmp r0, #0
3001E680  D004     		beq #8 ; 0x3001E68C


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
3001E684  F8DF 703C		ldr r7, [pc, #+60] ; 0x2401D428
3001E688  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
3001E68A  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
3001E68C  F8DF 7034		ldr r7, [pc, #+52] ; 0x2401D428
3001E690  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
3001E692  6837     		ldr r7, [r6]
3001E694  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
3001E696  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
3001E698  68B7     		ldr r7, [r6, #8]
3001E69A  42B8     		cmp r0, r7
3001E69C  BF38 2000		lomov r0, #0
3001E6A0  BF28 2001		hsmov r0, #1

#27			ST		Q
(-) BOOL
3001E6A4  7330     		strb r0, [r6, #12]

#28			RETCN
#29		
(-) BOOL
3001E6A6  2800     		cmp r0, #0
3001E6A8  D009     		beq #18 ; 0x3001E6BE


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3001E6AC  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
3001E6AE  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
3001E6B0  E005     		b #10 ; 0x3001E6BE


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
3001E6B4  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
3001E6B6  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3001E6B8  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
3001E6BA  2000     		mov r0, #0 ; 0

#42			ST		Q
(-) BOOL
3001E6BC  7330     		strb r0, [r6, #12]

3001E6BE  E8BD 4040		ldmia sp!, { r6, lr }

3001E6C2  4770     		bx lr

3001E6C4  FFFFFFFF		; 0x2401D428


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List program: status
**************************************************

PROGRAM status

END_PROGRAM

3001E6D0  B082     		sub sp, sp, #8
3001E6D2  F8CD E000		str lr, [sp]
3001E6D6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0			{SRC:status}
#1		 
#2		  
#3			(* Network 1 *)
#4			LD		TRUE
(-) UNDEF
3001E6DA  2001     		mov r0, #1 ; 1

#5			ST		LEDGREEN {R:1$1}
(*) BOOL
3001E6DC  F8DF 7020		ldr r7, [pc, #+32] ; 0x2401E4ED
3001E6E0  7038     		strb r0, [r7]

#6		 
#7			(* Network 2 *)
#8		opta_connection_status:
#9			LD		LEDGREEN {R:2$2}
(*) UNDEF
3001E6E2  F8DF 701C		ldr r7, [pc, #+28] ; 0x2401E4ED
3001E6E6  7838     		ldrb r0, [r7]

#10			ST		IR16388 {R:2$4}
(*) BOOL
3001E6E8  F8DF 7010		ldr r7, [pc, #+16] ; 0x2401D438
3001E6EC  7038     		strb r0, [r7]

3001E6EE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001E6F2  F8DD E000		ldr lr, [sp]
3001E6F6  B002     		add sp, sp, #8

3001E6F8  4770     		bx lr

3001E6FC  FFFFFFFF		; 0x2401D438
3001E700  FFFFFFFF		; 0x2401E4ED

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001E704  4770     		bx lr


*** OUTPUT:
3001E706  4770     		bx lr



**************************************************
	Task Background init code
**************************************************

3001E708  B082     		sub sp, sp, #8
3001E70A  F8CD E000		str lr, [sp]
3001E70E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001E712  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001E716  F8DD E000		ldr lr, [sp]
3001E71A  B002     		add sp, sp, #8

3001E71C  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

3001E730  B082     		sub sp, sp, #8
3001E732  F8CD E000		str lr, [sp]
3001E736  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 3133781911; *)
#4			MOVE		3133781911,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
3001E73A  F8DF 7084		ldr r7, [pc, #+132] ; 0xBAC9B797
3001E73E  4638     		mov r0, r7
3001E740  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002D0
3001E744  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( TO_DWORD( ADR($$ParDB) ), $$ParDBLength, 200, TO_DWORD( ADR(%MW200.0) ), 6, 2, 201, 0, 0, 2, 3133781911 ); *)
#7			ADR		%MW200.0	{LNXT:5|3|-1}
(*) UDINT
3001E746  F8DF 0070		ldr r0, [pc, #+112] ; 0x2401D430

#8			TO_DWORD	{LNXT:5|3|-1}
(-) @WORD
#9			ST		$$TMP3	{LNXT:5|3|-1}
(*) DWORD
3001E74A  F8DF 7064		ldr r7, [pc, #+100] ; 0x200002D4
3001E74E  6038     		str r0, [r7]

#10			ADR		$$ParDB	{LNXT:5|3|-1}
(*) DWORD
3001E750  F8DF 0068		ldr r0, [pc, #+104] ; 0x3001E4C0

#11			TO_DWORD	{LNXT:5|3|-1}
(-) @USINT
#12			sysDBase_SetExtTable		$$ParDBLength, 200, $$TMP3, 6, 2, 201, 0, 0, 2, 3133781911	{LNXT:5|3|-1}
(*) DWORD
3001E754  B088     		sub sp, sp, #32
3001E756  2706     		mov r7, #6 ; 6
3001E758  4639     		mov r1, r7
3001E75A  27C8     		mov r7, #200 ; 200
3001E75C  463A     		mov r2, r7
3001E75E  F8DF 7050		ldr r7, [pc, #+80] ; 0x200002D4
3001E762  683B     		ldr r3, [r7]
3001E764  2706     		mov r7, #6 ; 6
3001E766  F8CD 7000		str r7, [sp]
3001E76A  2702     		mov r7, #2 ; 2
3001E76C  F8CD 7004		str r7, [sp, #+4]
3001E770  27C9     		mov r7, #201 ; 201
3001E772  F8CD 7008		str r7, [sp, #+8]
3001E776  2700     		mov r7, #0 ; 0
3001E778  F8CD 700C		str r7, [sp, #+12]
3001E77C  2700     		mov r7, #0 ; 0
3001E77E  F8CD 7010		str r7, [sp, #+16]
3001E782  2702     		mov r7, #2 ; 2
3001E784  F8CD 7014		str r7, [sp, #+20]
3001E788  F8DF 7034		ldr r7, [pc, #+52] ; 0xBAC9B797
3001E78C  463F     		mov r7, r7
3001E78E  F8CD 7018		str r7, [sp, #+24]
3001E792  F8DF 4014		ldr r4, [pc, #+20] ; 0x80768F5
3001E796  F044 0401		orr r4, r4, #1
3001E79A  47A0     		blx r4
3001E79C  B008     		add sp, sp, #32

#13			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
3001E79E  F8DF 7014		ldr r7, [pc, #+20] ; 0x200002D8
3001E7A2  7038     		strb r0, [r7]

3001E7A4  E00E     		b #28

3001E7A8  FFFFFFFF		; 0x080768F5
3001E7AC  200002D0		; 0x200002D0
3001E7B0  200002D4		; 0x200002D4
3001E7B4  200002D8		; 0x200002D8
3001E7B8  FFFFFFFF		; 0x2401D430
3001E7BC  3001E4C0		; 0x3001E4C0
3001E7C0  BAC9B797		; 0xBAC9B797

END_PROGRAM
**************************************************
	List program: $$IOConfig
**************************************************

PROGRAM $$IOConfig

        VAR
warningsKiller : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:$$IOConfig}
#1		(*$WAITSWITCH$*)
#2		
#3			(* warningsKiller := sysCfgAnalogRes(16); *)
#4			LDP0		16	{LNXT:4|7|-1}
(-) UDINT
#5			sysCfgAnalogRes	{LNXT:4|7|-1}
(*) USINT
3001E7C4  2010     		mov r0, #16 ; 16
3001E7C6  F8DF 40BC		ldr r4, [pc, #+188] ; 0x807D611
3001E7CA  F044 0401		orr r4, r4, #1
3001E7CE  47A0     		blx r4

#6			ST		warningsKiller	{LNXT:4|7|-1}
(*) BOOL
3001E7D0  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A4
3001E7D4  7038     		strb r0, [r7]

#7		
#8			(* warningsKiller := sysCfgProgInput(0, 0); *)
#9			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#10			sysCfgProgInput		0	{LNXT:7|8|-1}
(*) USINT
3001E7D6  2000     		mov r0, #0 ; 0
3001E7D8  2100     		mov r1, #0 ; 0
3001E7DA  F8DF 40AC		ldr r4, [pc, #+172] ; 0x807D61D
3001E7DE  F044 0401		orr r4, r4, #1
3001E7E2  47A0     		blx r4

#11			ST		warningsKiller	{LNXT:7|8|-1}
(*) BOOL
3001E7E4  F8DF 70A4		ldr r7, [pc, #+164] ; 0x200002A4
3001E7E8  7038     		strb r0, [r7]

#12		
#13			(* warningsKiller := sysCfgProgInput(1, 0); *)
#14			LDP0		1	{LNXT:8|9|-1}
(-) BOOL
#15			sysCfgProgInput		0	{LNXT:8|9|-1}
(*) USINT
3001E7EA  2001     		mov r0, #1 ; 1
3001E7EC  2100     		mov r1, #0 ; 0
3001E7EE  F8DF 4098		ldr r4, [pc, #+152] ; 0x807D61D
3001E7F2  F044 0401		orr r4, r4, #1
3001E7F6  47A0     		blx r4

#16			ST		warningsKiller	{LNXT:8|9|-1}
(*) BOOL
3001E7F8  F8DF 7090		ldr r7, [pc, #+144] ; 0x200002A4
3001E7FC  7038     		strb r0, [r7]

#17		
#18			(* warningsKiller := sysCfgProgInput(2, 0); *)
#19			LDP0		2	{LNXT:9|10|-1}
(-) BOOL
#20			sysCfgProgInput		0	{LNXT:9|10|-1}
(*) USINT
3001E7FE  2002     		mov r0, #2 ; 2
3001E800  2100     		mov r1, #0 ; 0
3001E802  F8DF 4084		ldr r4, [pc, #+132] ; 0x807D61D
3001E806  F044 0401		orr r4, r4, #1
3001E80A  47A0     		blx r4

#21			ST		warningsKiller	{LNXT:9|10|-1}
(*) BOOL
3001E80C  F8DF 707C		ldr r7, [pc, #+124] ; 0x200002A4
3001E810  7038     		strb r0, [r7]

#22		
#23			(* warningsKiller := sysCfgProgInput(3, 0); *)
#24			LDP0		3	{LNXT:10|11|-1}
(-) BOOL
#25			sysCfgProgInput		0	{LNXT:10|11|-1}
(*) USINT
3001E812  2003     		mov r0, #3 ; 3
3001E814  2100     		mov r1, #0 ; 0
3001E816  F8DF 4070		ldr r4, [pc, #+112] ; 0x807D61D
3001E81A  F044 0401		orr r4, r4, #1
3001E81E  47A0     		blx r4

#26			ST		warningsKiller	{LNXT:10|11|-1}
(*) BOOL
3001E820  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002A4
3001E824  7038     		strb r0, [r7]

#27		
#28			(* warningsKiller := sysCfgProgInput(4, 0); *)
#29			LDP0		4	{LNXT:11|12|-1}
(-) BOOL
#30			sysCfgProgInput		0	{LNXT:11|12|-1}
(*) USINT
3001E826  2004     		mov r0, #4 ; 4
3001E828  2100     		mov r1, #0 ; 0
3001E82A  F8DF 405C		ldr r4, [pc, #+92] ; 0x807D61D
3001E82E  F044 0401		orr r4, r4, #1
3001E832  47A0     		blx r4

#31			ST		warningsKiller	{LNXT:11|12|-1}
(*) BOOL
3001E834  F8DF 7054		ldr r7, [pc, #+84] ; 0x200002A4
3001E838  7038     		strb r0, [r7]

#32		
#33			(* warningsKiller := sysCfgProgInput(5, 0); *)
#34			LDP0		5	{LNXT:12|13|-1}
(-) BOOL
#35			sysCfgProgInput		0	{LNXT:12|13|-1}
(*) USINT
3001E83A  2005     		mov r0, #5 ; 5
3001E83C  2100     		mov r1, #0 ; 0
3001E83E  F8DF 4048		ldr r4, [pc, #+72] ; 0x807D61D
3001E842  F044 0401		orr r4, r4, #1
3001E846  47A0     		blx r4

#36			ST		warningsKiller	{LNXT:12|13|-1}
(*) BOOL
3001E848  F8DF 7040		ldr r7, [pc, #+64] ; 0x200002A4
3001E84C  7038     		strb r0, [r7]

#37		
#38			(* warningsKiller := sysCfgProgInput(6, 0); *)
#39			LDP0		6	{LNXT:13|14|-1}
(-) BOOL
#40			sysCfgProgInput		0	{LNXT:13|14|-1}
(*) USINT
3001E84E  2006     		mov r0, #6 ; 6
3001E850  2100     		mov r1, #0 ; 0
3001E852  F8DF 4034		ldr r4, [pc, #+52] ; 0x807D61D
3001E856  F044 0401		orr r4, r4, #1
3001E85A  47A0     		blx r4

#41			ST		warningsKiller	{LNXT:13|14|-1}
(*) BOOL
3001E85C  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002A4
3001E860  7038     		strb r0, [r7]

#42		
#43			(* warningsKiller := sysCfgProgInput(7, 0); *)
#44			LDP0		7	{LNXT:14|4|-1}
(-) BOOL
#45			sysCfgProgInput		0	{LNXT:14|4|-1}
(*) USINT
3001E862  2007     		mov r0, #7 ; 7
3001E864  2100     		mov r1, #0 ; 0
3001E866  F8DF 4020		ldr r4, [pc, #+32] ; 0x807D61D
3001E86A  F044 0401		orr r4, r4, #1
3001E86E  47A0     		blx r4

#46			ST		warningsKiller	{LNXT:14|4|-1}
(*) BOOL
3001E870  F8DF 7018		ldr r7, [pc, #+24] ; 0x200002A4
3001E874  7038     		strb r0, [r7]

3001E876  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001E87A  F8DD E000		ldr lr, [sp]
3001E87E  B002     		add sp, sp, #8

3001E880  4770     		bx lr

3001E884  FFFFFFFF		; 0x0807D611
3001E888  FFFFFFFF		; 0x0807D61D
3001E88C  200002A4		; 0x200002A4

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001E890  4770     		bx lr


*** OUTPUT:
3001E892  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

3001E894  B082     		sub sp, sp, #8
3001E896  F8CD E000		str lr, [sp]
3001E89A  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001E89E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001E8A2  F8DD E000		ldr lr, [sp]
3001E8A6  B002     		add sp, sp, #8

3001E8A8  4770     		bx lr

**************************************************
	List program: fivesecmain
**************************************************

PROGRAM fivesecmain

        VAR
m1 : BOOL;
timer2sec : TOF;
timer5sec : TOF;
timer2secon : TON;
m2 : BOOL;
	END_VAR

END_PROGRAM

3001E8C0  B082     		sub sp, sp, #8
3001E8C2  F8CD E000		str lr, [sp]
3001E8C6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0			{SRC:fivesecmain}
#1		 
#2		 	(* P/N contacts management *)
#3			LD		M1
(*) UNDEF
3001E8CA  F8DF 70D8		ldr r7, [pc, #+216] ; 0x200002A5
3001E8CE  7838     		ldrb r0, [r7]

#4			ANDN	$$MEMPC$M1
(*) BOOL
3001E8D0  F8DF 70D4		ldr r7, [pc, #+212] ; 0x200002A6
3001E8D4  783F     		ldrb r7, [r7]
3001E8D6  2F00     		cmp r7, #0
3001E8D8  BF08 2701		eqmov r7, #1
3001E8DC  BF18 2700		nemov r7, #0
3001E8E0  4038     		and r0, r0, r7

#5			ST		$$PC$M1
(*) BOOL
3001E8E2  F8DF 70C8		ldr r7, [pc, #+200] ; 0x200002A7
3001E8E6  7038     		strb r0, [r7]

#6			LD		M1
(*) UNDEF
3001E8E8  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A5
3001E8EC  7838     		ldrb r0, [r7]

#7			ST		$$MEMPC$M1
(*) BOOL
3001E8EE  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A6
3001E8F2  7038     		strb r0, [r7]

#8		 
#9			(* Network 3 *)
#10		lubricator_toggle:
#11			LD		IR16385 {R:3$9}
(*) UNDEF
3001E8F4  F8DF 70D8		ldr r7, [pc, #+216] ; 0x2401D432
3001E8F8  7838     		ldrb r0, [r7]

#12			S		M1 {R:3$1}
(*) BOOL
3001E8FA  2800     		cmp r0, #0
3001E8FC  D009     		beq #0x000012
3001E8FE  B082     		sub sp, sp, #8
3001E900  F8CD 0000		str r0, [sp]
3001E904  2001     		mov r0, #1
3001E906  F8DF 709C		ldr r7, [pc, #+156] ; 0x200002A5
3001E90A  7038     		strb r0, [r7]
3001E90C  F8DD 0000		ldr r0, [sp]
3001E910  B002     		add sp, sp, #8

#13		 
#14			(* Network 4 *)
#15			LD		$$PC$M1
(*) UNDEF
3001E912  F8DF 7098		ldr r7, [pc, #+152] ; 0x200002A7
3001E916  7838     		ldrb r0, [r7]

#16			ST		TIMER2SEC.IN {R:4$7}
(*) BOOL
3001E918  F8DF 7098		ldr r7, [pc, #+152] ; 0x200002AC
3001E91C  7038     		strb r0, [r7]

#17			MOVE		5000,TIMER2SEC.PT {R:4$7}
(*) BOOL
3001E91E  F8DF 7080		ldr r7, [pc, #+128] ; 0x1388
3001E922  4638     		mov r0, r7
3001E924  F8DF 7090		ldr r7, [pc, #+144] ; 0x200002B0
3001E928  6038     		str r0, [r7]

#18			CAL		TIMER2SEC {R:4$7}
(*) UDINT
3001E92A  E92D 0021		stmdb sp!, { r0, r5 }
3001E92E  F8DF 5080		ldr r5, [pc, #+128] ; 0x200002A8
3001E932  F8DF 40A8		ldr r4, [pc, #+168] ; 0x3001E5D8
3001E936  F044 0401		orr r4, r4, #1
3001E93A  47A0     		blx r4
3001E93C  E8BD 0021		ldmia sp!, { r0, r5 }

#19			LD		TIMER2SEC.Q {R:4$7}
(*) UNDEF
3001E940  F8DF 7078		ldr r7, [pc, #+120] ; 0x200002B4
3001E944  7838     		ldrb r0, [r7]

#20			ST		LED2 {R:4$3}
(*) BOOL
3001E946  F8DF 708C		ldr r7, [pc, #+140] ; 0x2401E4E9
3001E94A  7038     		strb r0, [r7]

#21			ST		RELEASE2 {R:4$11}
(*) BOOL
3001E94C  F8DF 7088		ldr r7, [pc, #+136] ; 0x2401E70D
3001E950  7038     		strb r0, [r7]

#22		 
#23			(* Network 5 *)
#24			LD		M1 {R:5$0}
(*) UNDEF
3001E952  F8DF 7050		ldr r7, [pc, #+80] ; 0x200002A5
3001E956  7838     		ldrb r0, [r7]

#25			ST		TIMER2SECON.IN {R:5$2}
(*) BOOL
3001E958  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002C0
3001E95C  7038     		strb r0, [r7]

#26			MOVE		500,TIMER2SECON.PT {R:5$2}
(*) BOOL
3001E95E  F44F 70FA		mov r0, #500 ; 500
3001E962  F8DF 7064		ldr r7, [pc, #+100] ; 0x200002C4
3001E966  6038     		str r0, [r7]

#27			CAL		TIMER2SECON {R:5$2}
(*) UDINT
3001E968  E92D 0021		stmdb sp!, { r0, r5 }
3001E96C  F8DF 5050		ldr r5, [pc, #+80] ; 0x200002BC
3001E970  F8DF 406C		ldr r4, [pc, #+108] ; 0x3001E65C
3001E974  F044 0401		orr r4, r4, #1
3001E978  47A0     		blx r4
3001E97A  E8BD 0021		ldmia sp!, { r0, r5 }

#28			LD		TIMER2SECON.Q {R:5$2}
(*) UNDEF
3001E97E  F8DF 704C		ldr r7, [pc, #+76] ; 0x200002C8
3001E982  7838     		ldrb r0, [r7]

#29			R		M1 {R:5$1}
(*) BOOL
3001E984  2800     		cmp r0, #0
3001E986  D009     		beq #0x000012
3001E988  B082     		sub sp, sp, #8
3001E98A  F8CD 0000		str r0, [sp]
3001E98E  2000     		mov r0, #0
3001E990  F8DF 7010		ldr r7, [pc, #+16] ; 0x200002A5
3001E994  7038     		strb r0, [r7]
3001E996  F8DD 0000		ldr r0, [sp]
3001E99A  B002     		add sp, sp, #8

3001E99C  E022     		b #68

3001E9A0  00001388		; 0x00001388
3001E9A4  200002A5		; 0x200002A5
3001E9A8  200002A6		; 0x200002A6
3001E9AC  200002A7		; 0x200002A7
3001E9B0  200002A8		; 0x200002A8
3001E9B4  200002AC		; 0x200002AC
3001E9B8  200002B0		; 0x200002B0
3001E9BC  200002B4		; 0x200002B4
3001E9C0  200002BC		; 0x200002BC
3001E9C4  200002C0		; 0x200002C0
3001E9C8  200002C4		; 0x200002C4
3001E9CC  200002C8		; 0x200002C8
3001E9D0  FFFFFFFF		; 0x2401D432
3001E9D4  FFFFFFFF		; 0x2401E4E9
3001E9D8  FFFFFFFF		; 0x2401E70D
3001E9DC  3001E5D8		; 0x3001E5D8
3001E9E0  3001E65C		; 0x3001E65C

END_PROGRAM
**************************************************
	List program: twosecmain
**************************************************

PROGRAM twosecmain

        VAR
m1 : BOOL;
timer2sec : TOF;
timer5sec : TOF;
timer2secon : TON;
m2 : BOOL;
	END_VAR

END_PROGRAM

#0			{SRC:twosecmain}
#1		 
#2		 	(* P/N contacts management *)
#3			LD		M1
(*) UNDEF
3001E9E4  F8DF 70D8		ldr r7, [pc, #+216] ; 0x200002D9
3001E9E8  7838     		ldrb r0, [r7]

#4			ANDN	$$MEMPC$M1
(*) BOOL
3001E9EA  F8DF 70D8		ldr r7, [pc, #+216] ; 0x200002DA
3001E9EE  783F     		ldrb r7, [r7]
3001E9F0  2F00     		cmp r7, #0
3001E9F2  BF08 2701		eqmov r7, #1
3001E9F6  BF18 2700		nemov r7, #0
3001E9FA  4038     		and r0, r0, r7

#5			ST		$$PC$M1
(*) BOOL
3001E9FC  F8DF 70C8		ldr r7, [pc, #+200] ; 0x200002DB
3001EA00  7038     		strb r0, [r7]

#6			LD		M1
(*) UNDEF
3001EA02  F8DF 70BC		ldr r7, [pc, #+188] ; 0x200002D9
3001EA06  7838     		ldrb r0, [r7]

#7			ST		$$MEMPC$M1
(*) BOOL
3001EA08  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002DA
3001EA0C  7038     		strb r0, [r7]

#8		 
#9			(* Network 1 *)
#10		lubricator_toggle:
#11			LD		IR16384 {R:1$9}
(*) UNDEF
3001EA0E  F8DF 70DC		ldr r7, [pc, #+220] ; 0x2401D430
3001EA12  7838     		ldrb r0, [r7]

#12			S		M1 {R:1$1}
(*) BOOL
3001EA14  2800     		cmp r0, #0
3001EA16  D009     		beq #0x000012
3001EA18  B082     		sub sp, sp, #8
3001EA1A  F8CD 0000		str r0, [sp]
3001EA1E  2001     		mov r0, #1
3001EA20  F8DF 709C		ldr r7, [pc, #+156] ; 0x200002D9
3001EA24  7038     		strb r0, [r7]
3001EA26  F8DD 0000		ldr r0, [sp]
3001EA2A  B002     		add sp, sp, #8

#13		 
#14			(* Network 2 *)
#15			LD		$$PC$M1
(*) UNDEF
3001EA2C  F8DF 7098		ldr r7, [pc, #+152] ; 0x200002DB
3001EA30  7838     		ldrb r0, [r7]

#16			ST		TIMER2SEC.IN {R:2$7}
(*) BOOL
3001EA32  F8DF 709C		ldr r7, [pc, #+156] ; 0x200002E0
3001EA36  7038     		strb r0, [r7]

#17			MOVE		2000,TIMER2SEC.PT {R:2$7}
(*) BOOL
3001EA38  F44F 60FA		mov r0, #2000 ; 2000
3001EA3C  F8DF 7094		ldr r7, [pc, #+148] ; 0x200002E4
3001EA40  6038     		str r0, [r7]

#18			CAL		TIMER2SEC {R:2$7}
(*) UDINT
3001EA42  E92D 0021		stmdb sp!, { r0, r5 }
3001EA46  F8DF 5084		ldr r5, [pc, #+132] ; 0x200002DC
3001EA4A  F8DF 40AC		ldr r4, [pc, #+172] ; 0x3001E5D8
3001EA4E  F044 0401		orr r4, r4, #1
3001EA52  47A0     		blx r4
3001EA54  E8BD 0021		ldmia sp!, { r0, r5 }

#19			LD		TIMER2SEC.Q {R:2$7}
(*) UNDEF
3001EA58  F8DF 707C		ldr r7, [pc, #+124] ; 0x200002E8
3001EA5C  7838     		ldrb r0, [r7]

#20			ST		RELEASE {R:2$2}
(*) BOOL
3001EA5E  F8DF 7094		ldr r7, [pc, #+148] ; 0x2401E70C
3001EA62  7038     		strb r0, [r7]

#21			ST		LED1 {R:2$3}
(*) BOOL
3001EA64  F8DF 7088		ldr r7, [pc, #+136] ; 0x2401E4E8
3001EA68  7038     		strb r0, [r7]

#22		 
#23			(* Network 3 *)
#24			LD		M1 {R:3$0}
(*) UNDEF
3001EA6A  F8DF 7054		ldr r7, [pc, #+84] ; 0x200002D9
3001EA6E  7838     		ldrb r0, [r7]

#25			ST		TIMER2SECON.IN {R:3$2}
(*) BOOL
3001EA70  F8DF 706C		ldr r7, [pc, #+108] ; 0x200002F4
3001EA74  7038     		strb r0, [r7]

#26			MOVE		500,TIMER2SECON.PT {R:3$2}
(*) BOOL
3001EA76  F44F 70FA		mov r0, #500 ; 500
3001EA7A  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002F8
3001EA7E  6038     		str r0, [r7]

#27			CAL		TIMER2SECON {R:3$2}
(*) UDINT
3001EA80  E92D 0021		stmdb sp!, { r0, r5 }
3001EA84  F8DF 5054		ldr r5, [pc, #+84] ; 0x200002F0
3001EA88  F8DF 4070		ldr r4, [pc, #+112] ; 0x3001E65C
3001EA8C  F044 0401		orr r4, r4, #1
3001EA90  47A0     		blx r4
3001EA92  E8BD 0021		ldmia sp!, { r0, r5 }

#28			LD		TIMER2SECON.Q {R:3$2}
(*) UNDEF
3001EA96  F8DF 7050		ldr r7, [pc, #+80] ; 0x200002FC
3001EA9A  7838     		ldrb r0, [r7]

#29			R		M1 {R:3$1}
(*) BOOL
3001EA9C  2800     		cmp r0, #0
3001EA9E  D009     		beq #0x000012
3001EAA0  B082     		sub sp, sp, #8
3001EAA2  F8CD 0000		str r0, [sp]
3001EAA6  2000     		mov r0, #0
3001EAA8  F8DF 7014		ldr r7, [pc, #+20] ; 0x200002D9
3001EAAC  7038     		strb r0, [r7]
3001EAAE  F8DD 0000		ldr r0, [sp]
3001EAB2  B002     		add sp, sp, #8

3001EAB4  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EAB8  F8DD E000		ldr lr, [sp]
3001EABC  B002     		add sp, sp, #8

3001EABE  4770     		bx lr

3001EAC0  200002D9		; 0x200002D9
3001EAC4  200002DA		; 0x200002DA
3001EAC8  200002DB		; 0x200002DB
3001EACC  200002DC		; 0x200002DC
3001EAD0  200002E0		; 0x200002E0
3001EAD4  200002E4		; 0x200002E4
3001EAD8  200002E8		; 0x200002E8
3001EADC  200002F0		; 0x200002F0
3001EAE0  200002F4		; 0x200002F4
3001EAE4  200002F8		; 0x200002F8
3001EAE8  200002FC		; 0x200002FC
3001EAEC  FFFFFFFF		; 0x2401D430
3001EAF0  FFFFFFFF		; 0x2401E4E8
3001EAF4  FFFFFFFF		; 0x2401E70C
3001EAF8  3001E5D8		; 0x3001E5D8
3001EAFC  3001E65C		; 0x3001E65C

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001EB00  4770     		bx lr


*** OUTPUT:
3001EB02  4770     		bx lr



**************************************************
	Task Slow init code
**************************************************

3001EB04  B082     		sub sp, sp, #8
3001EB06  F8CD E000		str lr, [sp]
3001EB0A  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

Var init: V::FIVESECMAIN.$$PC$M1 = 1
3001EB0E  F8DF 0020		ldr r0, [pc, #+32] ; 0x1
3001EB12  F8DF 7020		ldr r7, [pc, #+32] ; 0x200002A7
3001EB16  7038     		strb r0, [r7]

Var init: V::TWOSECMAIN.$$PC$M1 = 1
3001EB18  F8DF 0014		ldr r0, [pc, #+20] ; 0x1
3001EB1C  F8DF 7018		ldr r7, [pc, #+24] ; 0x200002DB
3001EB20  7038     		strb r0, [r7]

3001EB22  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EB26  F8DD E000		ldr lr, [sp]
3001EB2A  B002     		add sp, sp, #8

3001EB2C  4770     		bx lr

3001EB30  00000001		; 0x00000001
3001EB34  200002A7		; 0x200002A7
3001EB38  200002DB		; 0x200002DB



**************************************************
	Global init code
**************************************************

3001EB50  B082     		sub sp, sp, #8
3001EB52  F8CD E000		str lr, [sp]
3001EB56  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EB5A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EB5E  F8DD E000		ldr lr, [sp]
3001EB62  B002     		add sp, sp, #8

3001EB64  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

3001EB66  B082     		sub sp, sp, #8
3001EB68  F8CD E000		str lr, [sp]
3001EB6C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EB70  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EB74  F8DD E000		ldr lr, [sp]
3001EB78  B002     		add sp, sp, #8

3001EB7A  4770     		bx lr



**************************************************
	Task $$VirtualTables init code
**************************************************

3001EB7C  B082     		sub sp, sp, #8
3001EB7E  F8CD E000		str lr, [sp]
3001EB82  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EB86  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EB8A  F8DD E000		ldr lr, [sp]
3001EB8E  B002     		add sp, sp, #8

3001EB90  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		000000003001E400h
End code area:            		000000003001ED08h
Code size:                		00000908h

Start local data area:    		0000000020000298h
End local data area:      		0000000020000304h
Local data size:          		0000006Ch

Start retentive data area:		0000000038000800h
End retentive data area:  		0000000038000800h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                8C3FFFB1
DEBUG MEMO ID:                          3001E6EE
FULL MEMO ID:                           00008F26
********************************************
